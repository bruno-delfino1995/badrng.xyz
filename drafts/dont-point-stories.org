#+title: Don't Point Stories

- What are you pointing? What 1 2 or 3 points mean? It's used as an estimation tool but without a clear estimation of what, or a broad "X days" definition. The team can handle X points, but what does that mean? I've never seen people consider the different aspects of a task and simply throw complexity or size points out.
- There's a big difference between doing one 13 points task and doing thirteen 1 point tasks. Are you considering context switching too? Where's the buffer for that?
- Complexity or size alone don't tell much, but if you divide them then it's more manageable/apparent. A small complex task might take way more time than a big simple task, but the moment you hide one of those you've lost an important data point.
- The way people use complexity is waaaay to subjective. It's often based on a personal opinion if that's complex instead of trying to get more objective data. How many files will we have to change? What's the average cyclomatic complexity of the functions in those files?
- I often imagine that if I need to go gather all that info, then I'd better spend my time doing the stuff, but that's the wrong approach. Often enough, developers go straight to code instead of planning the bigger picture, so it's valuable to scavenge for this information ahead of time. However, you must keep yourself at surface level instead of going too deep and spending more time planning than what an implementation would look like
- Even with all that planned out, how do you estimate now? Your team isn't homegeneous with the same person in every seat, it's a mixture of backgrounds and expertises. Ever seen frontend devs pointing backend tasks? ðŸ˜‚ Of course you can aim to have stable performance throughout the board, but I beg of you to hire junior developers and teach them as well. Once you introduce that, you'll see juniors pointing tasks the same way as seniors but getting frustrated because they can't hit those targets. Say you manage to have only top notch seniors in your team, then one leaves and you onboard a new person, there's no way that person will match the estimates given by people with longer ternure
- You still want to estimate so you can plan your deliveries, so I ask you to consider as if it's everyone's first day in the company and they don't have context. That'll force you to write descriptive tasks pointing where things need changing, why they need that, and how it connects with other stuff. But even with that, you'll likely miss deadlines here and there because people aren't perfect or machines, we want to learn, innovate, think outside the box, and that'll introduce variables in the execution part that wasn't considered in the planning phase.
- Epics, stories, initiatives, ... all of them have dependencies, priorities, cadence, and whatever other measure you can think of to draw a roadmap, why isn't that enough? You're so worried of having everything planned out within timeframes that you lose much more time in pointless meetings pointing work (pun intended), and you demotivate your developer that would stay focused and diligent in the process. If you had given them a vision instead of a to-do list, I bet they would feel much more empowered and happy to work on that.
- I see it often comes from a fear that developers will use whatever time they have to build the perfect solution, and that's true sometimes, but I only experienced it when we hadn't discussed trade-offs and the priority of it. When you make developers think about the impact of their work, let them communicate and routinely work on tech debt outside of product work, it becomes harder to have them drift from the discussed trade-offs and expected outcomes. Because, honestly, I have yet to find a tech focused developer (the kind that you're worried will waste as much time as possible) that likes to do product work endlessly instead of focusing on the juicy problems
